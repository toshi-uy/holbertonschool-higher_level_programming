Test File for 1-my_list.py
============================

Importing the function from the module:
>>> my_list = __import__('1-my_list').MyList

Checking for module docstring:
>>> m = __import__('1-my_list').__doc__
>>> len(m) > 1
True

Checking for function docstring:
>>> f = __import__('1-my_list').MyList.__doc__
>>> len(f) > 1
True

Basic Case (ordered)
>>> my_list.print_sorted([1, 2, 3, 4])
[1, 2, 3, 4]

Basic Case (unordered)
>>> my_list.print_sorted([3, 1, 4, 2])
[1, 2, 3, 4]

Negative Numbers
>>> my_list.print_sorted([-3, -1, -4, -2])
[-4, -3, -2, -1]

None as list
>>> my_list.print_sorted(None)
Traceback (most recent call last):
...
TypeError: 'NoneType' object is not iterable

No arguments passed to list
>>> my_list.print_sorted()
Traceback (most recent call last):
...
TypeError: print_sorted() missing 1 required positional argument: 'self'

Empty list
>>> my_list.print_sorted([])
[]

Two lists
>>> my_list.print_sorted([1,2], [2,4])
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given

Two ints and a string
>>> my_list.print_sorted([1, "b", 3])
Traceback (most recent call last):
...
TypeError: unorderable types: str() < int()

Matrix
>>> my_list.print_sorted([[1, 2, 3], [2, 3, 4]])
[[1, 2, 3], [2, 3, 4]]

list as part of the list
>>> my_list.print_sorted([1, 2, 3, [2], 3, 4])
Traceback (most recent call last):
...
TypeError: unorderable types: list() < int()

Tuple as part of the list
>>> my_list.print_sorted([1, 2, (3, 2), 3, 4])
Traceback (most recent call last):
...
TypeError: unorderable types: tuple() < int()
