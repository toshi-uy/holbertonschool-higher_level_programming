======================
Test archive for ``matrix_divided``
-------------------

Importing the function from the module:
>>> print_square = __import__('4-print_square').print_square

Checking for module docstring:
>>> m = __import__("4-print_square").__doc__
>>> len(m) > 1
True

Checking for function docstring:
>>> f = __import__("4-print_square").print_square.__doc__
>>> len(f) > 1
True

>>> print_square(4)
####
####
####
####

>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########

>>> print_square(0)

>>> print_square(1)
#

>>> print_square(None)
Traceback (most recent call last):
...
TypeError: size must be an integer

>>> print_square()
Traceback (most recent call last):
...
TypeError: print_square() missing 1 required positional argument: 'size'

>>> print_square(9.5)
Traceback (most recent call last):
...
TypeError: size must be an integer

>>> print_square(-6)
Traceback (most recent call last):
...
TypeError: size must be >= 0

>>> print_square("string")
Traceback (most recent call last):
...
TypeError: size must be an integer

>>> print_square(int('v'))
Traceback (most recent call last):
...
ValueError: invalid literal for int() with base 10: 'v'

>>> print_square([77])
Traceback (most recent call last):
...
TypeError: size must be an integer

>>> print_square('2')
Traceback (most recent call last):
...
TypeError: size must be an integer

>>> print_square(1e1000)
Traceback (most recent call last):
...
TypeError: size must be an integer
